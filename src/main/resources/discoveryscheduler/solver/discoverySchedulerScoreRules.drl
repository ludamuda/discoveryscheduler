package discoveryscheduler.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;
import discoveryscheduler.domain.*;
import java.util.ArrayList;

global HardMediumSoftScoreHolder scoreHolder;



// ############################################################################
// HARD constraints on Group assignment
// ############################################################################

rule "lunchAtCorrectTime"
	when
		Task(start != null, (start.getHour().getHourIndex() < 9 && getEnd().getHour().getHourIndex() >= 10), activity.getType() != "TeamSpirit")
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "lunchEnoughTime"
	when
		Task($id : id, start != null, $day : start.getDay(), $group : group, $start : start, $end : getEnd())
		Task(id > $id, start != null, start.getDay() == $day, group == $group, (($start < start && start.getTimestampIndex() - $end.getTimestampIndex() <= 2) || ($start > start && $start.getTimestampIndex() - getEnd().getTimestampIndex() <= 2)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "groupNoConflictingTasks"
	when
		Task($id : id, $group : group, $start : start, start != null, $end : getEnd())
		Task(id > $id, group == $group, start != null, !((start < $start && getEnd() < $start) || (start > $end && getEnd() > $end)))
	then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "groupNoMoreThanTwoTasksInADay"
	when
		Task($idFirst : id, start != null, $day : start.getDay(), $group : group)
		Task($idSecond : id, id > $idFirst, start != null, start.getDay() == $day, group == $group)
		Task(id > $idSecond, start != null, start.getDay() == $day, group == $group)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// HARD constraints on Instructor assignment
// ############################################################################

rule "instructorRequiredForTask"
	when 
		Task(start != null, instructor == null, isInstructorRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "instructorNotRequiredForTask"
	when 
		Task(start != null, instructor != null, !isInstructorRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "instructorNoConflictTasks"
	when
		Task($id : id, $start : start, $end : getEnd(), $instructor : instructor, start != null, instructor != null, $location : location, $activity : activity)
		Task(id > $id, start != null, instructor == $instructor, !((((isLocationRequired() && location == $location) || (!isLocationRequired() && activity == $activity)) && ((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() > -2) || (getEnd() > $end && start.getTimestampIndex() - $end.getTimestampIndex() > -2))) || ((location != $location || activity != $activity) && ((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() > 0) || (getEnd() > $end && start.getTimestampIndex() - $end.getTimestampIndex() > 0)))))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// HARD constraints on Location assignment
// ############################################################################

rule "locationRequiredForTask"
	when 
		Task(start != null, location == null, isLocationRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "locationTrek23MaxTwoConflictTasks"
	when
		Task($idFirst : id, start != null, $start : start, $end : getEnd(), location != null, activity.getType() == "Trek", (location.getTypeNumber() == 2 || location.getTypeNumber() == 3), $location : location)
		Task(id > $idFirst, $idSecond : id, start != null, location == $location, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() > -2 ) || (start.getTimestampIndex() - $end.getTimestampIndex() > -2 && getEnd() > $end)))
		Task(id > $idSecond, start != null, location == $location, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() > -2 ) || (start.getTimestampIndex() - $end.getTimestampIndex() > -2 && getEnd() > $end)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "locationClimbMTBNoConflictTasks"
	when
		Task($id : id, start != null, $start : start, $end : getEnd(), location != null, $location : location, $activity : activity, (activity.getType()=="MTB" || activity.getType()=="Climb"))
		Task(id > $id, start != null, location == $location, activity == $activity, !((start < $start && $start.getTimestampIndex()+1 - getEnd().getTimestampIndex()-1 > 0 ) || (start.getTimestampIndex()+1 - $end.getTimestampIndex()-1 > 0 && getEnd() > $end)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "locationTrek1MaxFourConflictTasks"
	when
		Task($idFirst : id, start != null, $start : start, $end : getEnd(), location != null, location.getType() == "Trek", location.getTypeNumber() == 1, $location : location)
		Task(id > $idFirst, $idSecond : id, start != null, location == $location, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
		Task(id > $idSecond, $idThird : id, start != null, location == $location, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
		Task(id > $idThird, $idFourth : id, start != null, location == $location, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
		Task(id > $idFourth, start != null, location == $location, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// HARD constraints on Activity collisions
// ############################################################################

rule "activityRaftCanoeMaxThreeConflictTasks"
	when
		Task($idFirst : id, start != null, $start : start, $end : getEnd(), $activity : activity, (activity.getType()=="Raft" || activity.getType()=="Canoe"))
		Task(id > $idFirst, $idSecond : id, start != null, activity == $activity, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
		Task(id > $idSecond, $idThird : id, start != null, activity == $activity, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
		Task(id > $idThird, start != null, activity == $activity, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "activityArcheryMaxFourConflictTasks"
	when
		Task($idFirst : id, start != null, $start : start, $end : getEnd(), $activity : activity, activity.getType()=="Archery")
		Task(id > $idFirst, $idSecond : id, start != null, activity == $activity, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
		Task(id > $idSecond, $idThird : id, start != null, activity == $activity, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
		Task(id > $idThird, $idFourth : id, start != null, activity == $activity, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
		Task(id > $idFourth, start != null, activity == $activity, !((start < $start && $start.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $end.getTimestampIndex() >= -1 && getEnd() > $end)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "activityC&RHRHSTeamSpiritHRMSNoConflictTasks"
	when
		Task($id : id, start != null, $start : start, $end : getEnd(), $activity : activity, (activity.getType()=="C&R" || activity.getType()=="HRHS" || activity.getType()=="TeamSpirit" || activity.getType()=="HRMS"))
		Task(id > $id, start != null, activity == $activity, !((start < $start && getEnd() < $start) || (start > $end && getEnd() > $end)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// MEDIUM constraints
// ############################################################################

rule "groupNoBusOnArrivalDay"
	when
		accumulate(
			$task : Task(start != null, (isLocationRequired() && location != null && group.getHotel().isBusRequired(location)) || (!isLocationRequired() && location == null && group.getHotel().isBusRequired(activity)), start.getDay() == group.getGroupTimestampList.get(0).getDay()),
			$taskCount : count($task)
		)
	then
		scoreHolder.addMediumConstraintMatch(kcontext, (-1)*$taskCount.intValue()*$taskCount.intValue());
end

rule "instructorsMinimize"
	when
		accumulate(
			Task(start != null, getInstructor() != null, $instructor : getInstructor()),
			$instructors : collectSet($instructor)
		)
	then
		scoreHolder.addMediumConstraintMatch(kcontext, (-1) * $instructors.size() * $instructors.size() * $instructors.size());
end

rule "additionalMorningEmployees"
	when
		$day : Day()
		$numOfGroups : Number() from accumulate($group : Group(), count($group))
		
		$morningTasks : ArrayList() from collect( Task(start != null, start.getDay() == $day, start.getHour().getHourIndex() <= 6))
		$morningReqEmployeesCount : Number() from accumulate(
			$task : Task(activity.getType() == "Climb" || activity.getType() == "C&R" || activity.getType() == "MTB" || activity.getType() == "HRHS" || activity.getType() == "TeamSpirit" || activity.getType() == "Canoe") from $morningTasks,
			count($task)
		)
		$morningFreeGuidesCount : Number() from accumulate(
			$task : Task(activity.getType() == "Free") from $morningTasks,
			 count($task)
		)
	then
		int morningAdditionalEmployeesCount = $morningReqEmployeesCount.intValue() - ($morningFreeGuidesCount.intValue() + ($numOfGroups.intValue() - $morningTasks.size()));
		if (morningAdditionalEmployeesCount < 0 ){
			morningAdditionalEmployeesCount = 0;
		} 
		scoreHolder.addMediumConstraintMatch(kcontext, (-1)*morningAdditionalEmployeesCount*morningAdditionalEmployeesCount);
end

rule "additionalAfternoonEmployees"
	when
		$day : Day()
		$numOfGroups : Number() from accumulate($group : Group(), count($group))
		
		$afternoonTasks : ArrayList() from collect( Task(start != null, start.getDay() == $day, start.getHour().getHourIndex() >= 9))
		$afternoonReqEmployeesCount : Number() from accumulate(
			$task : Task(activity.getType() == "Climb" || activity.getType() == "C&R" || activity.getType() == "MTB" || activity.getType() == "HRHS" || activity.getType() == "TeamSpirit" || activity.getType() == "Canoe") from $afternoonTasks,
			count($task)
		)
		$afternoonFreeGuidesCount : Number() from accumulate(
			$task : Task(activity.getType() == "Free") from $afternoonTasks,
			 count($task)
		)
	then
		int afternoonAdditionalEmployeesCount = $afternoonReqEmployeesCount.intValue() - ($afternoonFreeGuidesCount.intValue() + ($numOfGroups.intValue() - $afternoonTasks.size()));
		if (afternoonAdditionalEmployeesCount < 0){
			afternoonAdditionalEmployeesCount = 0;
		} 
		scoreHolder.addMediumConstraintMatch(kcontext, (-1)*afternoonAdditionalEmployeesCount*afternoonAdditionalEmployeesCount);
end

// ############################################################################
// SOFT constraints on Instructor satisfaction and fairness
// ############################################################################

rule "instructorStayAtLocation"
	when
		$instructor : Instructor()
		Task($id : id, start != null, $day : start.getDay(), $instructor == instructor, $location : location, $activity : activity, (location != null || activity.getType() == "HRHS"))
		accumulate(
		  	$task : Task(id > $id, start != null, start.getDay() == $day, instructor == $instructor, ((location != null && location != $location) || activity != $activity)),
			$instructorDifferentLocationCount : count($task)
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, (-10)*$instructorDifferentLocationCount.intValue()*$instructorDifferentLocationCount.intValue());
end

rule "instructorCompactProgram"
	when
		$instructor : Instructor()
		exists Task(start != null, instructor == $instructor)
		//$instructorStartDayIndex : Number() from accumulate(Task(start != null, $instructor == instructor, $startDay : start.getDay().getDayIndex()), min($startDay))
		//$instructorEndDayIndex : Number() from accumulate(Task(start != null, $instructor == instructor, $endDay : start.getDay().getDayIndex()), max($endDay))
		$instructorTasks : ArrayList() from collect(Task(start != null, instructor == $instructor))
	then
		int startDayIndex = ((Task) $instructorTasks.get($instructorTasks.size()-1)).getStart().getDay().getDayIndex();
		int endDayIndex = ((Task) $instructorTasks.get(0)).getStart().getDay().getDayIndex();
		for(int i = 0; i < $instructorTasks.size(); i++){
			if(((Task) $instructorTasks.get(i)).getStart().getDay().getDayIndex() < startDayIndex){
				startDayIndex = ((Task) $instructorTasks.get(i)).getStart().getDay().getDayIndex();
			}
			if(((Task) $instructorTasks.get(i)).getStart().getDay().getDayIndex() > endDayIndex){
				endDayIndex = ((Task) $instructorTasks.get(i)).getStart().getDay().getDayIndex();
			}
		}
		int freeTime = (endDayIndex - startDayIndex + 1)*2 - $instructorTasks.size();
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*freeTime*freeTime);
end

// ############################################################################
// SOFT constraints on Group satisfaction and fairness
// ############################################################################

rule "groupTasksInUndesiredTime"
	when
		$group : Group()
		accumulate( 
			$task : Task(start != null, getEnd().getHour().getHourIndex() >= 21, getGroup() == $group),
			$numOfLateEndTasks : count($task)
		)
		accumulate( 
			$task : Task(start != null, start.getHour().getHourIndex() < 1, getGroup() == $group),
			$numOfEarlyStartTasks : count($task)
		)
		accumulate( 
			Task($id : id, start != null, group == $group, $day : start.getDay(), $start : start, $end : getEnd()) &&
			$task : Task(id > $id, start != null, getGroup() == $group, start.getDay() == $day, (start > $start && ((start.getHour().getHourIndex() - ($end.getHour().getHourIndex() + 1)) > 3)) || (start < $start && (($start.getHour().getHourIndex() - (getEnd().getHour().getHourIndex() + 1)) > 3))),
			$numOfTimeDifferences : count($task)
		)
	then
		int numOfBadTimings  = $numOfLateEndTasks.intValue() + $numOfEarlyStartTasks.intValue() + $numOfTimeDifferences.intValue();
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*numOfBadTimings *numOfBadTimings );

end

rule "groupLocationAndBusPenalty"
	when
		$group : Group()
		accumulate(
			Task(start != null, group == $group, location != null, $locationPenalty : group.getHotel().getLocationPenalty(location)),
			$groupLocationPenalty : sum($locationPenalty)
		)
		accumulate(
			$task : Task(start != null, group == $group, (isLocationRequired() && location != null && group.getHotel().isBusRequired(location)) || (!isLocationRequired() && location == null && group.getHotel().isBusRequired(activity))),
			$groupBusTransportCount : count($task)
		)
	then
		int totalPenalty = $groupLocationPenalty.intValue() + $groupBusTransportCount.intValue();
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*totalPenalty*totalPenalty);
end

