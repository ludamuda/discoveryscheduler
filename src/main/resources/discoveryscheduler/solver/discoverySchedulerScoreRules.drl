package discoveryscheduler.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import discoveryscheduler.domain.*;

import java.util.ArrayList;

//global HardSoftScoreHolder scoreHolder;
global HardMediumSoftScoreHolder scoreHolder;


// ############################################################################
// HARD constraints
// ############################################################################

//there is a task for each required activity: build in - exactly as many tasks are created
//task has the length of its activity: build in task.getEnd()
//task starts in the morning or afternoon: build in task.start ValueRange by task.getPossibleStartList()
//task is planned between group arrival and departure: task.getPossibleStartList() selects starts from each group unique Timestamp list 

// ############################################################################
// HARD constraints on Group assignment
// ############################################################################

//group has max of two tasks per day
//covered by one hour lunch between tasks and start at 9? NOT.
rule "conflictingTaskGroupMoreThanTwoInSameDay"
	when
		Task($idLeft : id, start != null, $day : start.getDay(), $groupLeft : group)
		Task($idMiddle : id, id > $idLeft, start != null, start.getDay() == $day, group == $groupLeft)
		Task(id > $idMiddle, start != null, start.getDay() == $day, group == $groupLeft)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end


//tasks in group do not collide
rule "conflictingTasksSameGroupInSameTime"
	when
		Task($leftId : id, $leftGroup : group, $start : start, start != null, $end : getEnd())
		Task(id > $leftId, group == $leftGroup, start != null, !((start < $start && getEnd() < $start) || (start > $end && getEnd() > $end)))
	then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//TODO move the lunch tasks into medium, here create more benevolent => NO, this is the most benevolent
//there must be at least 1 hour for lunch for one activity per day
rule "timeForLunchWithOneTask"
	when
		Task(start != null, (start.getHour().getHourIndex() < 9 && getEnd().getHour().getHourIndex() > 11), activity.getType() != "TeamSpirit")
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//there must be at least 1 hour for lunch for two activities per day
//covered by timeForLunchWithOneTask NOT
rule "timeForLunchWithTwoTasks"
	when
		Task($idLeft : id, start != null, $day : start.getDay(), $groupLeft : group, $startLeft : start, $endLeft : getEnd())
		Task(id > $idLeft, start != null, start.getDay() == $day, group == $groupLeft, (($startLeft < start && start.getTimestampIndex() - $endLeft.getTimestampIndex() <= 2) || ($startLeft > start && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() <= 2)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// HARD constraints on Instructor assignment
// ############################################################################

//penalizes not presence of instructor if required
rule "instructorRequiredForTask"
	when 
		Task(start != null, instructor == null, isInstructorRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//penalizes presence of instructor if not required
// NOT covered by instructor assignment rule
rule "instructorNotRequiredForTask"
	when 
		Task(start != null, instructor != null, !isInstructorRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//instructors tasks cannot collide
//shorter time for instructors when the do not move between locations (removing transport from count)
rule "conflictInstructorsMoreTasksAtSameTime"
	when
		Task($idLeft : id, $startLeft : start, $endLeft : getEnd(), $instructorLeft : instructor, start != null, instructor != null, $locationLeft : location)
		Task(id > $idLeft, instructor == $instructorLeft, !((location == $locationLeft && (start < $startLeft && $startLeft.getTimestampIndex()+1 - getEnd().getTimestampIndex()-1 > 0 ) || (start.getTimestampIndex()+1 - $endLeft.getTimestampIndex()-1 > 0 && getEnd() > $endLeft)) || (location != $locationLeft && (start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() > 0) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() > 0 && getEnd() > $endLeft))))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// HARD constraints on Location assignment
// ############################################################################

//penalizes not presence of location if required
rule "locationRequiredForTask"
	when 
		Task(start != null, location == null, isLocationRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//tasks with locations must be at its locations
rule "taskAtItsLocation"
	when 
		Task(start != null, location != null, location.getType() != activity.getType())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end


//Climb and MTB tasks cannot collide in one location 
rule "conflictClimbMTBMoreTasksAtSameTime"
	when
		Task($idLeft : id, $startLeft : start, $endLeft : getEnd(), $locationLeft : location, start != null, location != null, $activityLeft : activity, (activity.getType()=="MTB" || activity.getType()=="Climb"))
		Task(id > $idLeft, location == $locationLeft, activity == $activityLeft, !((start < $startLeft && $startLeft.getTimestampIndex()+1 - getEnd().getTimestampIndex()-1 > 0 ) || (start.getTimestampIndex()+1 - $endLeft.getTimestampIndex()-1 > 0 && getEnd() > $endLeft)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//max four Trek tasks can collide in Trek location 1
rule "conflictTrekMoreThan4TasksAtSameTimeInTrekLocations1"
	when
		Task($idFirst : id, $startLeft : start, $endLeft : getEnd(), start != null, location != null, location.getType() == "Trek", location.getTypeNumber() == 1, $locationLeft : location)
		Task(id > $idFirst, $idSecond : id, location == $locationLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idSecond, $idThird : id, location == $locationLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idThird, $idFourth : id, location == $locationLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idFourth, location == $locationLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//max two Trek tasks can collide in Trek locations 2 and 3
rule "conflictTrekMoreThan2TasksAtSameTimeInTrekLocations23"
	when
		Task($idFirst : id, $startLeft : start, $endLeft : getEnd(), start != null, location != null, location.getType() == "Trek", (location.getTypeNumber() == 2 || location.getTypeNumber() == 3), $locationLeft : location)
		Task(id > $idFirst, $idSecond : id, location == $locationLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idSecond, location == $locationLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// HARD constraints on Activity collisions
// ############################################################################

//max three Raft or Canoe tasks can collide
rule "conflictRaftCanoeMoreThan3TasksAtSameTime"
	when
		Task($idFirst : id, $startLeft : start, $endLeft : getEnd(), start != null, $activityLeft : activity, (activity.getType()=="Raft" || activity.getType()=="Canoe"))
		Task(id > $idFirst, $idSecond : id, activity == $activityLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idSecond, $idThird : id, activity == $activityLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idThird, activity == $activityLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//max four Archery tasks can collide
rule "conflictArcheryMoreThan4TasksAtSameTime"
	when
		Task($idFirst : id, $startLeft : start, $endLeft : getEnd(), start != null, $activityLeft : activity, activity.getType()=="Archery")
		Task(id > $idFirst, $idSecond : id, activity == $activityLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idSecond, $idThird : id, activity == $activityLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idThird, $idFourth : id, activity == $activityLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
		Task(id > $idFourth, activity == $activityLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1 && getEnd() > $endLeft)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//other activities cannot collide
rule "conflictC&RHRHSTeamSpiritHRMSMoreTasksAtSameTime"
	when
		Task($idLeft : id, $startLeft : start, $endLeft : getEnd(), start != null, $activityLeft : activity, (activity.getType()=="C&R" || activity.getType()=="HRHS" || activity.getType()=="TeamSpirit" || activity.getType()=="HRMS"))
		Task(id > $idLeft, start != null, activity == $activityLeft, !((start < $startLeft && getEnd() < $startLeft) || (start > $endLeft && getEnd() > $endLeft)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// HARD constraints discarded
// ############################################################################

//penalizes presence of location if not required
/* covered by placing tasks at its locations YES
rule "locationNotRequiredForTask"
	when 
		Task(start != null, location != null, !isLocationRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/
//tasks of the same activity do not collide
/* different constraints with locations
rule "conflictingTasksSameActivityInSameTime"
    when
        Task($leftId : id, $leftActivity : activity, $start : start, start != null, $end : getEnd())
        Task(id > $leftId, activity == $leftActivity, !((start < $start && getEnd() < $start) || (start > $end && getEnd() > $end)))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/
/*covered by outOfBoundsFilter
rule "outOfBounds"
	when
		Task(start != null, group.getGroupTimestampList().get(group.getGroupTimestampList().size()-1).getTimestampIndex < start.getTimestampIndex()+activity.getLength())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -100);
end
*/
//task starts and ends in the same day
/* covered by value range and outofbound filter
rule "conflictingTaskSameDayStartInSameDayEnd"
	when
		Task(start != null, start.getDay() != getEnd().getDay())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/

// ############################################################################
// MEDIUM constraints
// ############################################################################

//Bus cannot be used on the arrival day - must get additional transport
rule "groupCannotUseBusOnArrivalDay"
	when
		accumulate(
			$task : Task(start != null, (isLocationRequired() && location != null && group.getHotel().isBusRequired(location)) || (!isLocationRequired() && location == null && group.getHotel().isBusRequired(activity)), start.getDay() == group.getGroupTimestampList.get(0).getDay()),
			$taskCount : count($task)
		)
	then
		scoreHolder.addMediumConstraintMatch(kcontext, (-1)*$taskCount.intValue()*$taskCount.intValue());
end

//minimize number of instructors
rule "minimizeNumberOfInstructors"
	when
		//$day : Day()
		accumulate(
			Task(start != null, getInstructor() != null, $instructor : getInstructor()/*, start.getDay() == $day*/),
			$instructors : collectSet($instructor)
		)
	then
		scoreHolder.addMediumConstraintMatch(kcontext, (-1)*$instructors.size()*$instructors.size()*$instructors.size());
end

// ############################################################################
// SOFT constraints on Instructor assignment
// ############################################################################



//additional employees needed
rule "additionalMorningEmployees"
	when
		$day : Day()
		$numOfGroups : Number() from accumulate($group : Group(), count($group))
		
		$morningTasks : ArrayList() from collect( Task(start != null, start.getDay() == $day, start.getHour().getHourIndex() <= 6))
		$morningReqInstructorsCount : Number() from accumulate(
			$task : Task(activity.getType() == "Climb" || activity.getType() == "C&R" || activity.getType() == "MTB" || activity.getType() == "HRHS" || activity.getType() == "TeamSpirit" || activity.getType() == "Canoe") from $morningTasks,
			count($task)
		)
		$morningFreeInstructorsCount : Number() from accumulate(
			$task : Task(activity.getType() == "Free") from $morningTasks,
			 count($task)
		)
	then
		int morningAdditionalInstructorsCount = $morningReqInstructorsCount.intValue() - ($morningFreeInstructorsCount.intValue() + ($numOfGroups.intValue() - $morningTasks.size()));
		if (morningAdditionalInstructorsCount < 0 ){
			morningAdditionalInstructorsCount = 0;
		} 
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*morningAdditionalInstructorsCount*morningAdditionalInstructorsCount);
end

//additional employees needed
rule "additionalAfternoonEmployees"
	when
		$day : Day()
		$numOfGroups : Number() from accumulate($group : Group(), count($group))
		
		$afternoonTasks : ArrayList() from collect( Task(start != null, start.getDay() == $day, start.getHour().getHourIndex() >= 9))
		$afternoonReqInstructorsCount : Number() from accumulate(
			$task : Task(activity.getType() == "Climb" || activity.getType() == "C&R" || activity.getType() == "MTB" || activity.getType() == "HRHS" || activity.getType() == "TeamSpirit" || activity.getType() == "Canoe") from $afternoonTasks,
			count($task)
		)
		$afternoonFreeInstructorsCount : Number() from accumulate(
			$task : Task(activity.getType() == "Free") from $afternoonTasks,
			 count($task)
		)
	then
		int afternoonAdditionalInstructorsCount = $afternoonReqInstructorsCount.intValue() - ($afternoonFreeInstructorsCount.intValue() + ($numOfGroups.intValue() - $afternoonTasks.size()));
		if (afternoonAdditionalInstructorsCount < 0){
			afternoonAdditionalInstructorsCount = 0;
		} 
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*afternoonAdditionalInstructorsCount*afternoonAdditionalInstructorsCount);
end

// ############################################################################
// SOFT constraints on Instructor satisfaction and fairness
// ############################################################################

///instructor should during one day stay at one location (independent of activity - location is defined by activity)

rule "instructorsStayAtLocationInOneDay"
	when
		$day : Day() 
		accumulate(
			Task(start != null, start.getDay() == $day, instructor != null, $instructor : instructor, location != null, $location : location) &&
		  	$task : Task(start != null, start.getDay() == $day, $instructor == instructor, location != null, $location != location),
			$instructorDifferentLocationCount : count($task)
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*$instructorDifferentLocationCount.intValue()*$instructorDifferentLocationCount.intValue());
end

// ############################################################################
// SOFT constraints on Group satisfaction and fairness
// ############################################################################

//groups unwanted timing
// fairness for groups
rule "groupsTasksInUndesiredTime"
	when
		$group : Group()
		accumulate( 
			$task : Task(start != null, getEnd().getHour().getHourIndex() >= 20, $group == getGroup()), //>= 18.30
			$numOfLateEndTasks : count($task)
		)
		accumulate( 
			$task : Task(start != null, start.getHour().getHourIndex() < 1, $group == getGroup()),
			$numOfEarlyStartTasks : count($task)
		)
		accumulate( 
			Task(start != null, group == $group, $day : start.getDay(), $start : start, $endHourIndex : getEnd().getHour().getHourIndex()) &&
			$task : Task(start != null, $group == getGroup(), start.getDay() == $day, start > $start,  ((start.getHour().getHourIndex() - $endHourIndex) <= 3)),
			$sumOfTimeDifferences : count($task)
		)
	then
		int total = $numOfLateEndTasks.intValue() + $numOfEarlyStartTasks.intValue() + $sumOfTimeDifferences.intValue();
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*total*total);

end

//tasks at locations by preference
rule "groupLocationBusAndPreferencePenalty"
	when
		$group : Group()
		accumulate(
			Task(start != null, group == $group, location != null, $locationPenalty : group.getHotel().getLocationPenalty(location)),
			$groupLocationPenalty : sum($locationPenalty)
		)
		accumulate(
			$task : Task(start != null, group == $group, (isLocationRequired() && location != null && group.getHotel().isBusRequired(location)) || (!isLocationRequired() && location == null && group.getHotel().isBusRequired(activity))),
			$groupBusTransportCount : count($task)
		)
	then
		int total = $groupLocationPenalty.intValue() + $groupLocationPenalty.intValue();
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*total*total);
end

//not necessary, instructors task alignment to the left
//TODO nice to have
/*rule "instructorTaskAllignment"
	when
		$day : Day()
		accumulate(
			Task(start != null, $day == start.getDay(), instructor != null, $instructor : instructor),
			$instructors : collectSet($instructor)
		)
		exists Task(start != null, $day == start.getDay(), instructor != null, instructor.getInstructorIndex() >= $instructors.size())
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end*/
