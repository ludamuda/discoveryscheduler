package discoveryscheduler.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import discoveryscheduler.domain.*;


global HardSoftScoreHolder scoreHolder;


// ############################################################################
// Hard constraints
// ############################################################################

//there is a task for each required activity: build in - exactly as many tasks are created
//task has the length of its activity: build in task.getEnd()
//TODO task starts in the morning or afternoon: build in task.start ValueRange by task.getPossibleStartList()
//task is planned between group arrival and departure: task.getPossibleStartList() selects starts from each group unique Timestamp list 

/*covered by outofboundsfilter
rule "outOfBounds"
	when
		Task(start != null, group.getGroupTimestampList().get(group.getGroupTimestampList().size()-1).getTimestampIndex < start.getTimestampIndex()+activity.getLength())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -100);
end
*/

//task starts and ends in the same day
/* pokryto pomoci value range a outofbound filterem
rule "conflictingTaskSameDayStartInSameDayEnd"
	when
		Task(start != null, start.getDay() != getEnd().getDay())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/

//group has max of two tasks per day
/* covered by one hour lunch between tasks and start at 9? NOT. */
rule "conflictingTaskGroupMoreThanTwoInSameDay"
	when
		Task($idLeft : id, start != null, $day : start.getDay(), $groupLeft : group)
		Task($idMiddle : id, id > $idLeft, start != null, start.getDay() == $day, group == $groupLeft)
		Task(id > $idMiddle, start != null, start.getDay() == $day, group == $groupLeft)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//tasks of the same activity do not collide
/* covered by putting tasks at locations?
rule "conflictingTasksSameActivityInSameTime"
    when
        Task($leftId : id, $leftActivity : activity, $start : start, start != null, $end : getEnd())
        Task(id > $leftId, activity == $leftActivity, !((start < $start && getEnd() < $start) || (start > $end && getEnd() > $end)))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/

//tasks in group do not collide
rule "conflictingTasksSameGroupInSameTime"
	when
		Task($leftId : id, $leftGroup : group, $start : start, start != null, $end : getEnd())
		Task(id > $leftId, group == $leftGroup, start != null, !((start < $start && getEnd() < $start) || (start > $end && getEnd() > $end)))
	then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//penalizes not presence of instructor if required
rule "instructorRequiredForTask"
	when 
		Task(start != null, instructor == null, isInstructorRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//penalizes presence of instructor if not required
/* NOT covered by instructor assignment rule */
rule "instructorNotRequiredForTask"
	when 
		Task(start != null, instructor != null, !isInstructorRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end


//instructors tasks cannot collide
//TODO presne casove urceni tasku pro instruktory - bez dopravy?
rule "conflictInstructorsMoreTasksAtSameTime"
	when
		Task($idLeft : id, $startLeft : start, $endLeft : getEnd(), $instructorLeft : instructor, start != null, instructor != null)
		Task(id > $idLeft, instructor == $instructorLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1   && getEnd() > $endLeft)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//there must be at least 1 hour for lunch
rule "conflictOneHourBetweenTasks"
	when
		Task($idLeft : id, start != null, $day : start.getDay(), $groupLeft : group, $startLeft : start, $endLeft : getEnd())
		Task(id > $idLeft, start != null, start.getDay() == $day, group == $groupLeft, (($startLeft < start && start.getTimestampIndex() - $endLeft.getTimestampIndex() <= 2) || ($startLeft > start && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() <= 2)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//penalizes not presence of location if required
rule "locationRequiredForTask"
	when 
		Task(start != null, location == null, isLocationRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end


//penalizes presence of location if not required
/* covered by placing tasks at its locations ANO
rule "locationNotRequiredForTask"
	when 
		Task(start != null, location != null, !isLocationRequired())
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/

//tasks in one location cannot collide
rule "conflictLocationsMoreTasksAtSameTime"
	when
		Task($idLeft : id, $startLeft : start, $endLeft : getEnd(), $locationLeft : location, start != null, location != null)
		Task(id > $idLeft, location == $locationLeft, !((start < $startLeft && $startLeft.getTimestampIndex() - getEnd().getTimestampIndex() >= -1 ) || (start.getTimestampIndex() - $endLeft.getTimestampIndex() >= -1   && getEnd() > $endLeft)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//tasks with locations must be at its locations
rule "taskAtItsLocation"
	when 
		Task(start != null, location != null, location.type != activity.name)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end


// ############################################################################
// Soft constraints
// ############################################################################


//minimize number of instructors
rule "minimizeNumberOfInstructors"
	when
		/*
		accumulate(
			Task(start != null, getInstructor() != null, $instructor : getInstructor()),
			$instructors : collectSet($instructor)
		)
		*/
		$instructor : Instructor()
		exists Task(getInstructor() == $instructor)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, (-1000)/*$instructors.size()*$instructors.size()*/);
end

//instructor should have at least 2 tasks a day for whole week
/*
rule "instructorsPenalizeFreeTime"
	when
		$instructor : Instructor()
		exists Task($instructor == instructor)
		accumulate(
		  	$task : Task(start != null, $instructor == instructor),
			$instructorTaskCount : count($task)
		)
		accumulate(
			$day : Day(),
			$days : count($day)
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, ($instructorTaskCount.intValue() - $days.intValue()*2)*($days.intValue()*2 - $instructorTaskCount.intValue()));
end
*/
/*
//instructors should have same amount of tasks
rule "instructorsPenalizeDifference"
	when
		$instructorLeft : Instructor($idLeft : id)
		exists Task($instructorLeft == instructor)
		accumulate(
		  	$task : Task(start != null, $instructorLeft == instructor),
			$instructorLeftTaskCount : count($task)
		)
		$instructorRight : Instructor(id > $idLeft)
		exists Task($instructorRight == instructor)
		accumulate(
		  	$task : Task(start != null, $instructorRight == instructor),
			$instructorRightTaskCount : count($task)
		)
	then
			scoreHolder.addSoftConstraintMatch(kcontext, ($instructorLeftTaskCount.intValue() - $instructorRightTaskCount.intValue())*($instructorRightTaskCount.intValue() - $instructorLeftTaskCount.intValue()));
end
*/

//instructors should have same activities in one day
// covered by instructors staying in location regardless of activity?
rule "instructorsShouldHaveSameActivityInOneDay"
	when
		$instructor : Instructor()
		Task($idLeft : id, start != null, $day : getDay(), $instructor == getInstructor(), $activity : getActivity())
		accumulate(
		  	$task : Task(id > $idLeft, start != null, getDay() == $day, $instructor == getInstructor(), $activity != getActivity()),
			$instructorDifferentActivityCount : count($task)
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*$instructorDifferentActivityCount.intValue()*$instructorDifferentActivityCount.intValue());
end

//instructor should during one day stay at one location (independent of activity - what?)

rule "instructorsStayAtLocationInOneDay"
	when
		$instructor : Instructor()
		Task($idLeft : id, start != null, $day : getDay(), $instructor == getInstructor(), $location : getLocation())
		accumulate(
		  	$task : Task(id > $idLeft, start != null, getDay() == $day, $instructor == getInstructor(), $location != getLocation()),
			$instructorDifferentLocationCount : count($task)
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*$instructorDifferentLocationCount.intValue()*$instructorDifferentLocationCount.intValue());
end

/*
//instructors shouldnt have 3 tasks if not neccesary
rule "instructorThreeTasksOnlyIfNeccesary"
	when
		$instructor : Instructor()
		Task($idLeft : id, start != null, $day : getDay(), $instructor == instructor)
		Task($idMiddle : id, id > $idLeft, start != null, getDay() == $day, $instructor == instructor)
		accumulate(
		  	$task : Task(id > $idMiddle, start != null, getDay() == $day, $instructor == instructor),
			$instructorThirdTaskCount : count($task)
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*$instructorThirdTaskCount.intValue()*$instructorThirdTaskCount.intValue());
end
*/

// problem...
//there shouldnt be many third days tasks for instructors
rule "minimizeThreeTasksPerDayPerInstructor"
	when
		Task($idLeft : id, start != null, $day : getDay(), instructor != null, $instructor : instructor)
		Task($idMiddle : id, id > $idLeft, start != null, getDay() == $day, $instructor == instructor)
		accumulate(
		  	$task : Task(id > $idMiddle, start != null, getDay() == $day, $instructor == instructor),
			$instructorThirdTaskCount : count($task)
		)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, (-1)*$instructorThirdTaskCount.intValue()*$instructorThirdTaskCount.intValue());
end


//task shouldn't start before 9.00AM
// fairness pro grupy
rule "tasksShouldStartAfter9AM"
	when
		$group : Group()
		accumulate( 
			$task : Task(start != null, start.getHour().getHourIndex() < 1, $group == getGroup()),
			$numOfEarlyStartTasks : count($task)
		)
	then
	 	scoreHolder.addSoftConstraintMatch(kcontext, (-1)*$numOfEarlyStartTasks.intValue()*$numOfEarlyStartTasks.intValue());
end

//task should end before PM
// fairness pro grupy
rule "tasksShouldEndBefore630PM"
	when
		$group : Group()
		accumulate( 
			$task : Task(start != null, getEnd().getHour().getHourIndex() >= 20, $group == getGroup()), //>= 18.30
			$numOfLateEndTasks : count($task)
		)
	then
	 	scoreHolder.addSoftConstraintMatch(kcontext, (-1)*$numOfLateEndTasks.intValue()*$numOfLateEndTasks.intValue());
end

